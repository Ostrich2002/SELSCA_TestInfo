{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\nvar _react = require('react');\nvar _setDisplayName = require('./setDisplayName');\nvar _setDisplayName2 = _interopRequireDefault(_setDisplayName);\nvar _wrapDisplayName = require('./wrapDisplayName');\nvar _wrapDisplayName2 = _interopRequireDefault(_wrapDisplayName);\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\nvar shouldUpdate = function shouldUpdate(test) {\n  return function (BaseComponent) {\n    var factory = (0, _react.createFactory)(BaseComponent);\n    var ShouldUpdate = function (_Component) {\n      _inherits(ShouldUpdate, _Component);\n      function ShouldUpdate() {\n        _classCallCheck(this, ShouldUpdate);\n        return _possibleConstructorReturn(this, _Component.apply(this, arguments));\n      }\n      ShouldUpdate.prototype.shouldComponentUpdate = function shouldComponentUpdate(nextProps) {\n        return test(this.props, nextProps);\n      };\n      ShouldUpdate.prototype.render = function render() {\n        return factory(this.props);\n      };\n      return ShouldUpdate;\n    }(_react.Component);\n    if (process.env.NODE_ENV !== 'production') {\n      return (0, _setDisplayName2.default)((0, _wrapDisplayName2.default)(BaseComponent, 'shouldUpdate'))(ShouldUpdate);\n    }\n    return ShouldUpdate;\n  };\n};\nexports.default = shouldUpdate;","map":null,"metadata":{},"sourceType":"script"}