{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\KRISHAN KUMAR SINGH\\\\Desktop\\\\gitClone\\\\ETL-PS-001\\\\SELSCA_V1.0\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\KRISHAN KUMAR SINGH\\\\Desktop\\\\gitClone\\\\ETL-PS-001\\\\SELSCA_V1.0\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\KRISHAN KUMAR SINGH\\\\Desktop\\\\gitClone\\\\ETL-PS-001\\\\SELSCA_V1.0\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\KRISHAN KUMAR SINGH\\\\Desktop\\\\gitClone\\\\ETL-PS-001\\\\SELSCA_V1.0\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\KRISHAN KUMAR SINGH\\\\Desktop\\\\gitClone\\\\ETL-PS-001\\\\SELSCA_V1.0\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nif (!window['Smart']) {\n  window['Smart'] = {\n    RenderMode: 'manual'\n  };\n} else {\n  window['Smart'].RenderMode = 'manual';\n}\nimport '../source/modules/smart.accordion';\nimport React from 'react';\nvar Smart = window.Smart;\n/**\r\n Single item in an Accordion view.\r\n*/\nvar AccordionItem = /*#__PURE__*/function (_React$Component) {\n  _inherits(AccordionItem, _React$Component);\n  function AccordionItem(props) {\n    var _this;\n    _classCallCheck(this, AccordionItem);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(AccordionItem).call(this, props));\n    _this.componentRef = React.createRef();\n    return _this;\n  }\n  // Gets the id of the React component.\n  _createClass(AccordionItem, [{\n    key: \"componentDidRender\",\n    value: function componentDidRender(initialize) {\n      var that = this;\n      var props = {};\n      var events = {};\n      var styles = null;\n      var stringifyCircularJSON = function stringifyCircularJSON(obj) {\n        var seen = new WeakSet();\n        return JSON.stringify(obj, function (k, v) {\n          if (v !== null && typeof v === 'object') {\n            if (seen.has(v)) return;\n            seen.add(v);\n          }\n          if (k === 'Smart') {\n            return v;\n          }\n          return v;\n        });\n      };\n      for (var prop in that.props) {\n        if (prop === 'children') {\n          continue;\n        }\n        if (prop === 'style') {\n          styles = that.props[prop];\n          continue;\n        }\n        if (prop.startsWith('on') && that.properties.indexOf(prop) === -1) {\n          events[prop] = that.props[prop];\n          continue;\n        }\n        props[prop] = that.props[prop];\n      }\n      if (initialize) {\n        that.nativeElement = this.componentRef.current;\n        if (that.nativeElement && !that.nativeElement.isCompleted) {\n          that.nativeElement.reactStateProps = JSON.parse(stringifyCircularJSON(props));\n        }\n      }\n      if (initialize && that.nativeElement && that.nativeElement.isCompleted) {\n        //\treturn;\n      }\n      for (var _prop in props) {\n        if (_prop === 'class' || _prop === 'className') {\n          var classNames = props[_prop].trim().split(' ');\n          for (var className in classNames) {\n            if (!that.nativeElement.classList.contains(classNames[className]) && classNames[className] !== \"\") {\n              that.nativeElement.classList.add(classNames[className]);\n            }\n          }\n          continue;\n        }\n        if (props[_prop] !== that.nativeElement[_prop]) {\n          var normalizeProp = function normalizeProp(str) {\n            return str.replace(/-([a-z])/g, function (g) {\n              return g[1].toUpperCase();\n            });\n          };\n          if (_prop === 'hover' || _prop === 'active' || _prop === 'focus' || _prop === 'selected') {\n            that.nativeElement.setAttribute(_prop, '');\n          }\n          var normalizedProp = normalizeProp(_prop);\n          if (that.nativeElement[normalizedProp] === undefined) {\n            that.nativeElement.setAttribute(_prop, props[_prop]);\n          }\n          if (props[_prop] !== undefined) {\n            if (typeof props[_prop] === 'object' && that.nativeElement.reactStateProps && !initialize) {\n              if (stringifyCircularJSON(props[_prop]) === stringifyCircularJSON(that.nativeElement.reactStateProps[normalizedProp])) {\n                continue;\n              }\n            }\n            that.nativeElement[normalizedProp] = props[_prop];\n          }\n        }\n      }\n      for (var eventName in events) {\n        that[eventName] = events[eventName];\n        that.nativeElement[eventName.toLowerCase()] = events[eventName];\n      }\n      if (initialize) {\n        if (that.onCreate) {\n          that.onCreate();\n        }\n        that.nativeElement.whenRendered(function () {\n          if (that.onReady) {\n            that.onReady();\n          }\n        });\n      }\n      // setup styles.\n      if (styles) {\n        for (var styleName in styles) {\n          that.nativeElement.style[styleName] = styles[styleName];\n        }\n      }\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.componentDidRender(true);\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      this.componentDidRender(false);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      var that = this;\n      if (!that.nativeElement) {\n        return;\n      }\n      that.nativeElement.whenRenderedCallbacks = [];\n      for (var i = 0; i < that.eventListeners.length; i++) {\n        var eventName = that.eventListeners[i];\n        that.nativeElement.removeEventListener(eventName.substring(2).toLowerCase(), that[eventName]);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"smart-accordion-item\", {\n        ref: this.componentRef\n      }, this.props.children);\n    }\n  }, {\n    key: \"id\",\n    get: function get() {\n      if (!this._id) {\n        this._id = 'AccordionItem' + Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);\n      }\n      return this._id;\n    }\n    /** Sets or gets header's arrow position. If the value is 'none' the arrow is not shown.\r\n    *\tProperty type: AccordionItemArrow | string\r\n    */\n  }, {\n    key: \"arrow\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.arrow : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.arrow = value;\n      }\n    }\n    /** Sets or gets the content if the item.\r\n    *\tProperty type: boolean\r\n    */\n  }, {\n    key: \"expanded\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.expanded : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.expanded = value;\n      }\n    }\n    /** Sets or gets the expanded state.\r\n    *\tProperty type: boolean\r\n    */\n  }, {\n    key: \"focused\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.focused : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.focused = value;\n      }\n    }\n    /** Sets or gets the focus state.\r\n    *\tProperty type: string\r\n    */\n  }, {\n    key: \"label\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.label : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.label = value;\n      }\n    } // Gets the properties of the React component.\n  }, {\n    key: \"properties\",\n    get: function get() {\n      return [\"arrow\", \"content\", \"expanded\", \"focused\", \"label\"];\n    } // Gets the events of the React component.\n  }, {\n    key: \"eventListeners\",\n    get: function get() {\n      return [\"onCollapse\", \"onExpand\", \"onCreate\", \"onReady\"];\n    }\n  }]);\n  return AccordionItem;\n}(React.Component);\nvar Smart$1 = window.Smart;\n/**\r\n Accordion organizes content within collapsable items.\r\n*/\nvar Accordion = /*#__PURE__*/function (_React$Component2) {\n  _inherits(Accordion, _React$Component2);\n  function Accordion(props) {\n    var _this2;\n    _classCallCheck(this, Accordion);\n    _this2 = _possibleConstructorReturn(this, _getPrototypeOf(Accordion).call(this, props));\n    _this2.componentRef = React.createRef();\n    return _this2;\n  }\n  // Gets the id of the React component.\n  _createClass(Accordion, [{\n    key: \"collapse\",\n    /** Collapses an item at a specified index.\r\n    * @param {number} position. The index of the collapsed item.\r\n    */\n    value: function collapse(position) {\n      var _this3 = this;\n      if (this.nativeElement.isRendered) {\n        this.nativeElement.collapse(position);\n      } else {\n        this.nativeElement.whenRendered(function () {\n          _this3.nativeElement.collapse(position);\n        });\n      }\n    }\n    /** Expands an item at a specified index.\r\n    * @param {number} position. The index of the expanded item.\r\n    */\n  }, {\n    key: \"expand\",\n    value: function expand(position) {\n      var _this4 = this;\n      if (this.nativeElement.isRendered) {\n        this.nativeElement.expand(position);\n      } else {\n        this.nativeElement.whenRendered(function () {\n          _this4.nativeElement.expand(position);\n        });\n      }\n    }\n    /** Inserts a new item at a specified index.\r\n    * @param {number} index. The index where the item must be inserted.\r\n    * @param {any} item. An object containing the values for the properties of the new item to be inserted.\r\n    */\n  }, {\n    key: \"insert\",\n    value: function insert(index, item) {\n      var _this5 = this;\n      if (this.nativeElement.isRendered) {\n        this.nativeElement.insert(index, item);\n      } else {\n        this.nativeElement.whenRendered(function () {\n          _this5.nativeElement.insert(index, item);\n        });\n      }\n    }\n    /** Removes an item at a specified index.\r\n    * @param {number} position. The index of the item to be removed.\r\n    */\n  }, {\n    key: \"removeAt\",\n    value: function removeAt(position) {\n      var _this6 = this;\n      if (this.nativeElement.isRendered) {\n        this.nativeElement.removeAt(position);\n      } else {\n        this.nativeElement.whenRendered(function () {\n          _this6.nativeElement.removeAt(position);\n        });\n      }\n    }\n    /** Updates an item from the element.\r\n    * @param {number} index. The index of the item to be updated.\r\n    * @param {any} settings. An object containing the values for the properties of the item that will be updated.\r\n    */\n  }, {\n    key: \"update\",\n    value: function update(index, settings) {\n      var _this7 = this;\n      if (this.nativeElement.isRendered) {\n        this.nativeElement.update(index, settings);\n      } else {\n        this.nativeElement.whenRendered(function () {\n          _this7.nativeElement.update(index, settings);\n        });\n      }\n    }\n  }, {\n    key: \"componentDidRender\",\n    value: function componentDidRender(initialize) {\n      var that = this;\n      var props = {};\n      var events = {};\n      var styles = null;\n      var stringifyCircularJSON = function stringifyCircularJSON(obj) {\n        var seen = new WeakSet();\n        return JSON.stringify(obj, function (k, v) {\n          if (v !== null && typeof v === 'object') {\n            if (seen.has(v)) return;\n            seen.add(v);\n          }\n          if (k === 'Smart') {\n            return v;\n          }\n          return v;\n        });\n      };\n      for (var prop in that.props) {\n        if (prop === 'children') {\n          continue;\n        }\n        if (prop === 'style') {\n          styles = that.props[prop];\n          continue;\n        }\n        if (prop.startsWith('on') && that.properties.indexOf(prop) === -1) {\n          events[prop] = that.props[prop];\n          continue;\n        }\n        props[prop] = that.props[prop];\n      }\n      if (initialize) {\n        that.nativeElement = this.componentRef.current;\n        if (that.nativeElement && !that.nativeElement.isCompleted) {\n          that.nativeElement.reactStateProps = JSON.parse(stringifyCircularJSON(props));\n        }\n      }\n      if (initialize && that.nativeElement && that.nativeElement.isCompleted) {\n        //\treturn;\n      }\n      for (var _prop2 in props) {\n        if (_prop2 === 'class' || _prop2 === 'className') {\n          var classNames = props[_prop2].trim().split(' ');\n          for (var className in classNames) {\n            if (!that.nativeElement.classList.contains(classNames[className]) && classNames[className] !== \"\") {\n              that.nativeElement.classList.add(classNames[className]);\n            }\n          }\n          continue;\n        }\n        if (props[_prop2] !== that.nativeElement[_prop2]) {\n          var normalizeProp = function normalizeProp(str) {\n            return str.replace(/-([a-z])/g, function (g) {\n              return g[1].toUpperCase();\n            });\n          };\n          if (_prop2 === 'hover' || _prop2 === 'active' || _prop2 === 'focus' || _prop2 === 'selected') {\n            that.nativeElement.setAttribute(_prop2, '');\n          }\n          var normalizedProp = normalizeProp(_prop2);\n          if (that.nativeElement[normalizedProp] === undefined) {\n            that.nativeElement.setAttribute(_prop2, props[_prop2]);\n          }\n          if (props[_prop2] !== undefined) {\n            if (typeof props[_prop2] === 'object' && that.nativeElement.reactStateProps && !initialize) {\n              if (stringifyCircularJSON(props[_prop2]) === stringifyCircularJSON(that.nativeElement.reactStateProps[normalizedProp])) {\n                continue;\n              }\n            }\n            that.nativeElement[normalizedProp] = props[_prop2];\n          }\n        }\n      }\n      for (var eventName in events) {\n        that[eventName] = events[eventName];\n        that.nativeElement[eventName.toLowerCase()] = events[eventName];\n      }\n      if (initialize) {\n        Smart$1.Render();\n        if (that.onCreate) {\n          that.onCreate();\n        }\n        that.nativeElement.whenRendered(function () {\n          if (that.onReady) {\n            that.onReady();\n          }\n        });\n      }\n      // setup styles.\n      if (styles) {\n        for (var styleName in styles) {\n          that.nativeElement.style[styleName] = styles[styleName];\n        }\n      }\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.componentDidRender(true);\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      this.componentDidRender(false);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      var that = this;\n      if (!that.nativeElement) {\n        return;\n      }\n      that.nativeElement.whenRenderedCallbacks = [];\n      for (var i = 0; i < that.eventListeners.length; i++) {\n        var eventName = that.eventListeners[i];\n        that.nativeElement.removeEventListener(eventName.substring(2).toLowerCase(), that[eventName]);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"smart-accordion\", {\n        ref: this.componentRef\n      }, this.props.children);\n    }\n  }, {\n    key: \"id\",\n    get: function get() {\n      if (!this._id) {\n        this._id = 'Accordion' + Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);\n      }\n      return this._id;\n    }\n    /** Sets or gets the animation mode. Animation is disabled when the property is set to 'none'\r\n    *\tProperty type: Animation | string\r\n    */\n  }, {\n    key: \"animation\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.animation : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.animation = value;\n      }\n    }\n    /** Determines the data source that will be loaded to the Accordion.\r\n    *\tProperty type: any\r\n    */\n  }, {\n    key: \"dataSource\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.dataSource : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.dataSource = value;\n      }\n    }\n    /** Enables or disables the accordion. Disabled elements can not be interacted with.\r\n    *\tProperty type: boolean\r\n    */\n  }, {\n    key: \"disabled\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.disabled : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.disabled = value;\n      }\n    }\n    /** Sets or gets the expanded item indexes. Using this property items can be expanded by passing in their indexes. The number of expanded items is limited by the expandMode.\r\n    *\tProperty type: number[]\r\n    */\n  }, {\n    key: \"expandedIndexes\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.expandedIndexes : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.expandedIndexes = value;\n      }\n    }\n    /** Sets or gets the expand mode. Expand mode determines how the items will expand or collapse.\r\n    *\tProperty type: AccordionExpandMode | string\r\n    */\n  }, {\n    key: \"expandMode\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.expandMode : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.expandMode = value;\n      }\n    }\n    /** Sets or gets the language. Used in conjunction with the property messages.\r\n    *\tProperty type: string\r\n    */\n  }, {\n    key: \"locale\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.locale : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.locale = value;\n      }\n    }\n    /** Callback used to customize the format of the messages that are returned from the Localization Module.\r\n    *\tProperty type: any\r\n    */\n  }, {\n    key: \"localizeFormatFunction\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.localizeFormatFunction : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.localizeFormatFunction = value;\n      }\n    }\n    /** Sets or gets an object specifying strings used in the widget that can be localized. Used in conjunction with the property locale.\r\n    *\tProperty type: any\r\n    */\n  }, {\n    key: \"messages\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.messages : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.messages = value;\n      }\n    }\n    /** Determines if the element is readonly or not. If the element true, users cannot interact with it.\r\n    *\tProperty type: boolean\r\n    */\n  }, {\n    key: \"readonly\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.readonly : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.readonly = value;\n      }\n    }\n    /** Enables or disables accordion reordering.\r\n    *\tProperty type: boolean\r\n    */\n  }, {\n    key: \"reorder\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.reorder : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.reorder = value;\n      }\n    }\n    /** Sets or gets the value indicating whether the element is aligned to support locales using right-to-left fonts.\r\n    *\tProperty type: boolean\r\n    */\n  }, {\n    key: \"rightToLeft\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.rightToLeft : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.rightToLeft = value;\n      }\n    }\n    /** Determines the theme. Theme defines the look of the element\r\n    *\tProperty type: string\r\n    */\n  }, {\n    key: \"theme\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.theme : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.theme = value;\n      }\n    }\n    /** Determines whether the element can be focused or not.\r\n    *\tProperty type: boolean\r\n    */\n  }, {\n    key: \"unfocusable\",\n    get: function get() {\n      return this.nativeElement ? this.nativeElement.unfocusable : undefined;\n    },\n    set: function set(value) {\n      if (this.nativeElement) {\n        this.nativeElement.unfocusable = value;\n      }\n    } // Gets the properties of the React component.\n  }, {\n    key: \"properties\",\n    get: function get() {\n      return [\"animation\", \"dataSource\", \"disabled\", \"expandedIndexes\", \"expandMode\", \"locale\", \"localizeFormatFunction\", \"messages\", \"readonly\", \"reorder\", \"rightToLeft\", \"theme\", \"unfocusable\"];\n    } // Gets the events of the React component.\n  }, {\n    key: \"eventListeners\",\n    get: function get() {\n      return [\"onCollapse\", \"onCollapsing\", \"onDragEnd\", \"onDragStart\", \"onExpand\", \"onExpanding\", \"onCreate\", \"onReady\"];\n    }\n  }]);\n  return Accordion;\n}(React.Component);\nexport default Accordion;\nexport { Smart$1 as Smart, Accordion, AccordionItem };","map":null,"metadata":{},"sourceType":"module"}